{"version":3,"sources":["components/Logo/Logo.js","components/ImageLinkForm/ImageLinkForm.js","components/ColorPicker/ColorPicker.js","App.js","serviceWorker.js","index.js","components/Logo/colorchecker.png","components/Footer/icon.png","icon.png"],"names":["Logo","className","options","max","style","height","color","alt","src","colorchecker","ImageLinkForm","onInputChange","onButtonSubmit","uploadImage","type","onChange","onClick","ColorPicker","ImageUrl","Info","width","paddingTop","map","info","i","str","hex","substring","console","log","name","app","Clarifai","App","apiKey","particleOptions","particles","event","setState","input","target","value","ColorInfo","response","outputs","data","colors","w3c","displayInfo","state","models","predict","COLOR_MODEL","then","catch","err","params","this","icon","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message","module","exports"],"mappings":"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","file":"static/js/main.dc771f72.chunk.js","sourcesContent":["import React from 'react';\r\nimport Tilt from 'react-tilt';\r\nimport './Logo.css';\r\nimport colorchecker from './colorchecker.png';\r\n\r\nconst Logo = () => {\r\n  return (\r\n    <div className=\"center Logo \">\r\n\r\n     <Tilt className=\"Tilt Tiltnew br2 mt4\" options={{ max : 25 }} style={{ height: 70, color: 'white' }} >\r\n \t<div className=\"Tilt-inner \" style={{ }}> <img alt= \"colorchecker\" src = {colorchecker} /> </div>\r\n\t</Tilt>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Logo;\r\n","import React, {useState} from 'react';\r\nimport './ImageLinkForm.css';\r\n\r\n\r\nconst ImageLinkForm = ({onInputChange, onButtonSubmit, uploadImage}) => {\r\n\r\n{/*\tconst [image,setImage] = useState('')\r\n\tconst [loading, setLoading] = useState(false)\r\n\r\n\tconst uploadImage = async e => {\r\n\t\tconst files = e.target.files\r\n\t\tconst data = new FormData()\r\n\t\tdata.append('file',files[0])\r\n\t\tdata.append('upload_preset' , 'Sharif')\r\n\t\tsetLoading(true)\r\n\t\tconst res = await fetch(\r\n\t\t\t'https://api.cloudinary.com/v1_1/sharifhimu/image/upload',\r\n\t\t\t{\r\n\t\t\t\tmethod: 'POST',\r\n\t\t\t\tbody: data\r\n\t\t\t}\t\r\n\t\t\t)\r\n\t\tconst file = await res.json()\r\n\r\n\t\tsetImage(file.secure_url)\r\n\t\tsetLoading(false)\r\n\t}   */}\r\n\r\n  return (\r\n    <div className=\"center ImageLinkForm\">\r\n    <p className='center pl2 white'>\r\n    {`Copy and paste a png or jpg format image`}\r\n    </p>\r\n\r\n    <div className=''>\r\n    <div className='center form pa3 br4 shadow-5'>\r\n    <input className='f4 pa2 w-90  br3 forminside center' type='text' onChange={onInputChange} />\r\n    <button onClick={onButtonSubmit} className='w-30 grow f4 link ph3  dib center detect br3 white'>Detect</button>\r\n  \t\t</div>\r\n\r\n    </div>\r\n  {/*\t  <div className='center'>\r\n    <div className='center form pa4 '>  \r\n    <input className='f4 pa2 w-50 center' type='file' placeholder=\"Upload image\" onChange={uploadImage} />\r\n   \t\t \r\n   \t\t \r\n\r\n   \t\t\t{this.setLoading ? (\r\n   \t\t\t\t<p>loading...</p>\r\n   \t\t\t\t) : (<div>\r\n   \t\t\t\t\t<img src={this.setImage} style={{width: '500px' , height: 'auto'}} />\t\r\n   \t\t\t\t\t<button onClick={onButtonSubmit} className='w-30 grow f4 link ph3 pv1 dib  bg-light'>Detect</button>\r\n   \t\t\t\t\t</div>\t\r\n   \t\t\t\t)\r\n\t\t\t\t\t}     \r\n    </div>  \r\n    </div>   */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageLinkForm;\r\n","import React from 'react';\r\nimport Tilt from  'react-tilt'; \r\n\r\n\r\nconst ColorPicker = ({ImageUrl, Info}) => {\r\n  \r\n   // console.log(Info);\r\n   \r\n  \r\n\r\n  return (\r\n    <div className=\"center ma\">\r\n    <div className= '  mt2'>\r\n\r\n         <Tilt className=\" center Tilt mb5  \" options={{ max : 5 }} style={{ width: '20em' }} >\r\n        <div className=\"Tilt-inner tiltview\" style={{paddingTop: '20px'}}>  \r\n        <img alt=' ' src={ImageUrl} width='500px' height= 'auto' />\r\n         </div>\r\n        </Tilt>\r\n            \r\n                  \r\n          <div className=' white'>\r\n              {Info.map((info,i) => {\r\n\r\n                             let str = Info[i].hex;\r\n                               str = str.substring(1);\r\n                              console.log(str);   \r\n\r\n                return (\r\n                       <div className=\"  \" >\r\n                       <div className= \"infoview\">\r\n                       <img alt='color' src={`https://www.colorhexa.com/${str}.png`} width='20px' height='20px' />\r\n                        <p > {Info[i].name}  <br/> {Info[i].hex}</p>\r\n                        </div>\r\n                        \r\n                        </div>\r\n                    );\r\n                          }\r\n                          )\r\n                      }\r\n        \r\n          </div>\r\n    </div>\r\n          \r\n                        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorPicker;\r\n\r\n\r\n\r\n// center  w-10 ma4 mt4","import React, {Component} from 'react';\n\nimport './App.css';\n\nimport Logo from './components/Logo/Logo';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport ColorPicker from './components/ColorPicker/ColorPicker';\nimport Footer from './components/Footer/Footer';\n\nimport Particles from 'react-particles-js';\nimport Clarifai from 'clarifai';\n\nimport icon from './icon.png';\n\nconst app = new Clarifai.App({\n apiKey: '42c8c4aad3e04e518a22cdf213b901d3'\n});\n\nconst particleOptions = {\n\n                \"interactivity\": {\n                    \"detect_on\": \"window\",\n                    \"events\": {\n                        \"onhover\": {\n                            \"enable\": false,\n                            \"mode\": \"repulse\",\n                             \n                        },\n                        \"onclick\": {\n                            \"enable\": true,\n                            \"mode\": \"repulse\"\n                        },\n                        \"resize\": true\n                    },\n\n\n                  },\n\n                    \n\n                particles: {\n                  \n                   \"shape\": {\n                        \"type\": \"circle\",\n                        \"stroke\": {\n                            \"width\": 5,\n                            \"color\": \"#ffffff\"\n                        } },\n\n                       \"opacity\": {\n                        \"value\": 0.1,\n                        \"random\": true,\n                        \"anim\": {\n                            \"enable\": true,\n                            \"speed\": .1,\n                            \"opacity_min\": 0,\n                            \"sync\": true\n                        }\n                    },\n\n                    \n\n                     \"bubble\": {\n                            \"distance\": 500,\n                            \"size\": 100,\n                            \"duration\": 5,\n                            \"opacity\": .1,\n                            \"speed\": .1\n                        },\n\n                     \"number\": {\n                        \"value\": 100,\n                        \"density\": {\n                            \"enable\": true,\n                            \"value_area\": 2000\n                        }\n                    },      \n                }\n              }\n\n\n\nclass App extends Component {\n\n  constructor() {\n      super();\n      this.state = {\n          input: '',\n          ImageUrl: '',\n          Info: [],\n\n         \n      }\n  }\n\n\n  onInputChange = (event) => {\n        this.setState({input: event.target.value});\n  }\n\n  ColorInfo = (response) => {\n             return response.outputs[0].data.colors.map((i) =>i.w3c);\n              \n  }\n\n  displayInfo = (Info) => {\n    this.setState({Info: Info})\n  }\n\n  onButtonSubmit = () => {\n    this.setState({ImageUrl: this.state.input})\n      app.models\n      .predict(\n        Clarifai.COLOR_MODEL,\n       this.state.input)\n      .then(response => this.displayInfo(this.ColorInfo(response)))\n      .catch(err => console.log(err));\n      \n  }\n\n  \n   \n  render(){\n  return (\n    <div className=\" \">\n    \n   \n\n    <Particles  className='particles'\n              params={particleOptions}\n              \n            />   \n     <div className='white'>       \n    {`Made by Sharif Himu`}   \n     </div>        \n      <Logo />\n\n    \n\n      <ImageLinkForm \n      onInputChange ={this.onInputChange}\n       onButtonSubmit={this.onButtonSubmit} \n       uploadImage = {this.uploadImage}\n       />\n      \n      <ColorPicker \n      Info = {this.state.Info}\n      ImageUrl={this.state.ImageUrl} />   \n    \n      <img className=\"icon\" alt=\"icon\" src= {icon} />        \n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/colorchecker.736d1382.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.d24a5895.png\";","module.exports = __webpack_public_path__ + \"static/media/icon.d24a5895.png\";"],"sourceRoot":""}